#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2024 Evgeny Kazantsev <exequtic@gmail.com>
# SPDX-License-Identifier: MIT

source "$(dirname "$0")/utils"

fetchData() {
    echo '<?xml version="1.0" encoding="UTF-8"?><data>' > "$XML"

    local page=0
    local pagesize=100

    while true; do
        pageXML=$(mktemp "$tempDir/XXXXXX.xml")
        api_url="https://api.opendesktop.org/ocs/v1/content/data?categories=705&sort=new&page=$page&pagesize=$pagesize"

        curl -m 30 -s -o "$pageXML" --request GET --url "$api_url"

        [ ! -s "$pageXML" ] && return 1

        totalitems=$(xmllint --xpath "string(//ocs/meta/totalitems)" $pageXML)
        statuscode=$(xmllint --xpath "string(//ocs/meta/statuscode)" $pageXML)

        case $statuscode in
            100)
                xmllint --xpath "//content[@details='summary']" $pageXML >> $XML

                items=$(((page + 1) * pagesize))
                if [[ $totalitems > $items ]]; then
                    ((page++))
                else
                    echo '</data>' >> "$XML"
                    break
                fi
            ;;

            200) return 2 ;;
              *) return 3 ;;
        esac
    done

    return 0
}

getWidgets() {
    plasmoids=$(find "$HOME/.local/share/plasma/plasmoids" -mindepth 1 -maxdepth 1 -type d -printf "%f\n")
    if [ -z "$plasmoids" ]; then
        exit
    else
        while IFS= read -r line; do lines+=("$line"); done <<< "$plasmoids"
    fi
}

getWidgetInfo() {
    local metadata="$HOME/.local/share/plasma/plasmoids/$plasmoid/metadata.json"
    [ -s "$metadata" ] || return 1

    jq . $metadata >/dev/null 2>&1 || return 2
    if ! jq -e '.KPackageStructure == "Plasma/Applet"' "$metadata" >/dev/null 2>&1; then
        updateJson $metadata "$(jq '. + { "KPackageStructure": "Plasma/Applet" }' $metadata)"
    fi

    local originName=$(jq -r '.KPlugin.Name' $metadata)
    name=$(echo "$originName" | sed 's/ /-/g; s/.*/\L&/')

    local knsregistry="$HOME/.local/share/knewstuff3/plasmoids.knsregistry"
    [ -s "$knsregistry" ] && contentId=$(xmllint --xpath "string(//installedfile[contains(text(), 'plasma/plasmoids/$plasmoid')]/../id)" $knsregistry)
    [ -z "$contentId" ] && contentId="$(getId "$plasmoid" | head -n 1)"
    [ -z "$contentId" ] && contentId=$(xmllint --xpath "string(//name[text()='$originName']/../id)" $XML)
    [ -z "$contentId" ] && return 3

    currentVer=$(clearVer "$(jq -r '.KPlugin.Version' "$metadata")")
    latestVer=$(clearVer "$(xmllint --xpath "string(//id[text()='$contentId']/../version)" $XML)")
    [ -z "$currentVer" ] || [ -z "$latestVer" ] && return 4
    compareVer "$currentVer" "$latestVer"
    [[ $? != 2 ]] && return 5

    description=$(jq -r '.KPlugin.Description' $metadata | sed 's/"/\\"/g' | tr -d '\n')
    [ -z "$description" ] || [ "$description" = "null" ] && description="$WIDGETS_NODESC"

    author=$(jq -r '.KPlugin.Authors[].Name' $metadata | paste -sd "," - | sed 's/,/, /g')
    [ -z "$author" ] || [ "$author" = "null" ] && author="?"

    icon=$(jq -r '.KPlugin.Icon' $metadata)
    local fallbackIcon="start-here-kde-plasma-symbolic"
    if [ -z "$icon" ]; then
        icon=$fallbackIcon
    else
        local iconTheme=$(kreadconfig6 --file kdeglobals --group Icons --key Theme)
        local themeDir1="/usr/share/icons/$iconTheme/"
        local themeDir2="$HOME/.local/share/icons/$iconTheme/"
        local themeDir3="$HOME/.icons/$iconTheme/"
        ! find -L "$themeDir1" "$themeDir2" "$themeDir3" \
            -type f -name "$icon.svg" -print -quit 2>/dev/null | grep -q . \
                && icon=$fallbackIcon
    fi

    url="https://store.kde.org/p/$contentId"
    repo="kde-store"

    return 0
}

getLink() {
    local signed=()
    local files=0

    while read -r download_version; do
        ((files++))
        if [[ "$latestVer" == "$(clearVer "$(xmllint --xpath "string(//id[text()='$contentId']/../$download_version)" $XML)")" ]]; then
            signed+=("${download_version#download_version}")
        fi
    done < <(xmllint --xpath "//content[id='$contentId']/*" $XML | grep -o 'download_version[0-9]\+' | uniq)

    if [[ $files -eq 1 || ${#signed[@]} -eq 1 ]]; then
        echo $(xmllint --xpath "string(//id[text()='$contentId']/../downloadlink${signed[0]:-1})" $XML) > $tempDir/link
        return 0
    else
        [[ $files -eq 0 ]] && return 1
        [[ ${#signed[@]} -eq 0 ]] && return 2
        (( ${#signed[@]} > 1 )) && return 3
    fi
}

makeList() {
    local out=""
    for plasmoid in "${lines[@]}"; do
        getWidgetInfo
        [[ $? -ne 0 ]] && continue
        out+="{\"NM\": \"${name}\","
        out+="\"RE\": \"${repo}\","
        out+="\"CN\": \"${contentId}\","
        out+="\"IN\": \"${icon}\","
        out+="\"DE\": \"${description}\","
        out+="\"AU\": \"${author}\","
        out+="\"VO\": \"${currentVer}\","
        out+="\"VN\": \"${latestVer}\","
        out+="\"LN\": \"${url}\"}",
    done

    echo -e "[${out%,}]" > $updatesList
}

checkWidgets() {
    for cmd in curl jq; do
        command -v "$cmd" >/dev/null || { echo 127; exit; }
    done

    makeTempDir
    XML="$tempDir/api.opendesktop.xml"
    updatesList="$tempDir/update.list.json"

    trap cleanup EXIT

    declare -a plasmoid lines

    getWidgets
    fetchData

    case $? in
        1) echo 1; exit ;;
        2) echo 2; exit ;;
        3) echo 3; exit ;;
    esac

    makeList

    jq . $updatesList
}

downloadWidget() {
    mkdir -p $tempDir/$name/unpacked
    link=$(cat $tempDir/link)
    package="$tempDir/$name/$(basename "${link}")"

    curl -s -o $package --request GET --location "$link" 2>/dev/null

    [ ! -s "$package" ] && return 1
    
    case "$package" in
         *.zip | *.plasmoid) unzip -q "$package" -d "$tempDir/$name/unpacked" ;;
        *.xz | *.gz | *.tar) tar -xf "$package" -C "$tempDir/$name/unpacked" ;;
                          *) return 2 ;;
    esac

    metadata=$(find $tempDir/$name/unpacked -name metadata.json)
    [ -z "metadata" ] && return 3

    jq . $metadata >/dev/null 2>&1 || return 4

    if ! jq -e '.KPackageStructure == "Plasma/Applet"' "$metadata" >/dev/null 2>&1; then
        updateJson $metadata "$(jq '. + { "KPackageStructure": "Plasma/Applet" }' $metadata)"
    fi

    updateJson $metadata "$(jq --arg new_value "$latestVer" '.KPlugin.Version = $new_value' $metadata)"

    return 0
}

upgradeAllWidgets() {
    dependencies "curl jq unzip tar"

    makeTempDir
    XML="$tempDir/api.opendesktop.xml"
    updatesList="$tempDir/update.list.json"

    trap cleanup EXIT

    declare -a plasmoid lines

    getWidgets
    fetchData & printWhile $! "$WIDGETS_FETCH"
    [[ $exitCode -ne 0 ]] && exit

    makeList & printWhile $! "$WIDGETS_CHECK"

    if [[ -s "$updatesList" ]] && jq -e '(. | length) > 0' "$updatesList" > /dev/null 2>&1; then
        echo
        jq -c 'sort_by(.NM)[]' "$updatesList" | while read -r widget; do
            echo -e "$(colorize white bold $(echo "$widget" | jq -r '.NM')) \t \
                     $(colorize red bold $(echo "$widget" | jq -r '.VO')) \t \
                     $(colorize white "->") \t \
                     $(colorize green bold $(echo "$widget" | jq -r '.VN'))"
        done | column -t
        echo

        if [[ $widgetConfirmation = true ]]; then
            while true; do
                printQuestion "$WIDGETS_PROCEED"; read -r answer
                case "$answer" in
                    [Yy]*) echo; break;;
                 [Nn]*|"") return 0;;
                        *)  ;;
                esac
            done
        fi

        updated=false
        while read -r widget; do
            name=$(echo "$widget" | jq -r '.NM')
            contentId=$(echo "$widget" | jq -r '.CN')
            latestVer=$(echo "$widget" | jq -r '.VN')

            echo "$(colorize blue bold "$ICO_EXEC $name ($latestVer)")"

            getLink & printWhile $! "$WIDGETS_LINK"
            [[ $exitCode -ne 0 ]] && { echo; continue; }

            downloadWidget & printWhile $! "$WIDGETS_DOWNLOADING"
            [[ $exitCode -ne 0 ]] && { echo; continue; }

            kpackagetool6 -t Plasma/Applet -u $(dirname $(find $tempDir/$name -name "metadata.json")) 2>/dev/null
            updated=true
            sleep 1
            echo
        done < <(jq -c 'sort_by(.NM)[]' "$updatesList")

        [[ $updated = true ]] && restartPlasmashell
    else
        printDone "$MNG_DONE"
    fi
}

upgradeWidget() {
    [ -n "$1" ] && contentId="$1" || exit
    [ -n "$2" ] && name="$2" || exit

    dependencies "curl jq unzip tar"

    mkdir -p $tempDir/$name/unpacked
    XML="$tempDir/$name/api.opendesktop.xml"

    trap cleanup EXIT

    {
        curl -m 30 -s -o $XML --request GET --url "https://api.opendesktop.org/ocs/v1/content/data/$contentId" 2>/dev/null
        if [ -s "$XML" ]; then
            statuscode=$(xmllint --xpath "string(//ocs/meta/statuscode)" $XML)
            case $statuscode in
                100) return 0 ;;
                200) return 2 ;;
                  *) return 3 ;;
            esac
        else
            return 1
        fi
    } & printWhile $! "$WIDGETS_FETCH"
    [[ $exitCode -ne 0 ]] && exit

    latestVer=$(clearVer "$(xmllint --xpath "string(//id[text()='$contentId']/../version)" $XML)")
    
    getLink & printWhile $! "$WIDGETS_LINK"
    [[ $exitCode -ne 0 ]] && exit

    downloadWidget & printWhile $! "$WIDGETS_DOWNLOADING"
    [[ $exitCode -ne 0 ]] && exit

    kpackagetool6 -t Plasma/Applet -u $(dirname $(find $tempDir/$name -name "metadata.json")) 2>/dev/null
    sleep 1
    echo

    restartPlasmashell
}

listWidgets() {
    declare -a plasmoid lines
    getWidgets
    local out=""
    for plasmoid in "${lines[@]}"; do
        local json="$HOME/.local/share/plasma/plasmoids/$plasmoid/metadata.json"; [ -s "$json" ] || continue
        local name="$(jq -r '.KPlugin.Name' $json)"; [ -z "$name" ] && continue
        local currentVer=$(clearVer "$(jq -r '.KPlugin.Version' "$json")"); [ -z "$currentVer" ] && continue
        out+="{\"NM\": \"${name}\","
        out+="\"VO\": \"${currentVer}\"},\n"
    done
    echo -e $out
}

case "$1" in
          "list") listWidgets;;
         "check") checkWidgets;;
       "upgrade") shift; upgradeWidget $1 $2;;
    "upgradeAll") upgradeAllWidgets;;
               *) exit;;
esac
