#!/usr/bin/env bash

# SPDX-FileCopyrightText: 2024 Evgeny Kazantsev <exequtic@gmail.com>
# SPDX-License-Identifier: MIT

source "$(dirname "$0")/utils"

trap 'echo -e "\n\n$(colorize red bold $ICO_WARN "CTRL+C. $UPGRADE_SKIPPED")"' SIGINT

bin="$sudoBin pacman"; [ "$aur" = true ] && bin=$wrapper

fullSystemUpgrade() {
    startTime=$(date +%s)
    criticalPackages=("linux" "linux-lts" "linux-zen" "linux-hardened" "linux-firmware")
    criticalUpdated=()

    if [ "$arch" = true ]; then
        printMsg "$UPGRADE_FULL_ARCH"
        echo

        [ "$mirrors" = true ] && { $scriptDir/mirrorlist; echo; }

        local archCmd="$bin -Syu"; [ "$upgradeFlags" = true ] && archCmd="$archCmd $upgradeFlagsText"

        printExec "$archCmd"

        declare -A beforeVersions
        for pkg in "${criticalPackages[@]}"; do
            if pacman -Q $pkg &> /dev/null; then
                beforeVersions[$pkg]=$(pacman -Q $pkg | awk '{print $2}')
            fi
        done

        eval ${archCmd}

        for pkg in "${criticalPackages[@]}"; do
            if pacman -Q $pkg &> /dev/null; then
                afterVersion=$(pacman -Q $pkg | awk '{print $2}')
                if [ "${beforeVersions[$pkg]}" != "$afterVersion" ]; then
                    criticalUpdated+=("$pkg")
                fi
            fi
        done
    fi

    if [ "$flatpak" = true ]; then
        printMsg "$UPGRADE_FULL_FLATPAK"
        echo

        local flatpakCmd="flatpak update $flatpakFlags"

        printExec "$flatpakCmd"

        eval ${flatpakCmd}
    fi

    if [ "$widgets" = true ]; then
        printMsg "$UPGRADE_FULL_WIDGETS"
        echo
        $scriptDir/widgets upgradeAll
    fi

    if [ -n "$execScript" ]; then
        printf '\n\033[32m'; printf '%.0s:' {1..48}; printf '\033[0m\n\n'

        printExec "$execScript"

        eval ${execScript}
    fi

    trap ' ' SIGINT

    endTime=$(date +%s)
    runTime=$((endTime-startTime))
    echo
    printImportant "$UPGRADE_EXECTIME" "$(printf "%02dh:%02dm:%02ds" $((runTime / 3600)) $(( (runTime % 3600) / 60 )) $((runTime % 60)))"

    if [ ${#criticalUpdated[@]} -gt 0 ]; then
        echo
        printImportant "Critical package(s) updated, reboot may be required:" "${criticalUpdated[*]}"
        while true; do
            printQuestion "Do you want to reboot now?"; read -r answer
            case "$answer" in
                    [Yy]*) qdbus6 org.kde.Shutdown /Shutdown logoutAndReboot;;
                 [Nn]*|"") break;;
                        *)  ;;
            esac
        done
    fi

    printClose
}

arch_package() {
    printMsg "$UPGRADE_PACKAGE: $1"
    echo

    printImportant "$UPGRADE_WIKI"
    printImportant "$UPGRADE_PARTIAL"
    echo

    printExec "$bin -Sy" $1

    $bin -Sy $1

    printClose
}

flatpak_package() {
    printMsg "$UPGRADE_PACKAGE: $2"
    echo

    printExec "flatpak update" "$1 $flatpakFlags"

    flatpak update $1 $flatpakFlags

    printClose
}

widget_package() {
    printMsg "$UPGRADE_PACKAGE: $2"
    echo

    $scriptDir/widgets upgrade $1 $2

    printClose
}

postUpgrade() {
    local list=""
    [ "$arch" = true ] && list+=$(pacman -Q | awk '{print "{\"NM\": \"" $1 "\", \"VO\": \"" $2 "\"},"}')
    [ "$flatpak" = true ] && list+=$(flatpak list --app --columns=name,version,active | awk -F'\t' '{print "{\"NM\": \"" $1 "\", \"VO\": \"" $2 $3 "\"},"}')
    [ "$widgets" = true ] && list+=$($scriptDir/widgets list)
    echo "[${list%,}]"
}

case "$1" in
          "full") fullSystemUpgrade ;;
          "arch") shift; arch_package $1 ;;
       "flatpak") shift; flatpak_package $1 $2;;
        "widget") shift; widget_package $1 $2;;
   "postUpgrade") postUpgrade ;;
               *) exit;;
esac
